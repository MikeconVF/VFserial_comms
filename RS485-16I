from pymodbus.client.sync import ModbusSerialClient
import time
from modbus_var import modbus_variables
# Create a Modbus serial client
client = ModbusSerialClient(
    method='rtu',
    port='/dev/cu.usbserial-1420',  # Replace with your serial port
    baudrate=115200,  # Set the baud rate of your serial communication
    parity='N',  # Set the parity as required
    stopbits=1,  # Set the stop bits as required
    bytesize=8  # Set the data bits as required
)


modbus_vars = modbus_variables()
MOD_16I = modbus_vars.MOD_16I['address']
start_register = modbus_vars.MOD_16I['start_register']
num_registers = modbus_vars.MOD_16I['num_registers']
num_registers = modbus_vars.MOD_16I['num_registers']

if client.connect():
    # Read the holding register at address 40003
    response = client.read_holding_registers(2, 1, unit=0)
        
    if response.isError():
        print("Modbus error:", response)
    
    if response.registers[0]==6:
        # Access the retrieved data
        for register_number in range(num_registers):
                # Read the discrete input
                response = client.read_discrete_inputs(start_register + register_number, 1, unit=MOD_16I)
                if response.isError():
                    print("Modbus error:", response)
                    break

                # Access the retrieved data
                register_val = response.bits[0]
                print("Register", start_register + register_number, "value =", register_val)

                # Assign the value of input register 1 to the variable "start" and latch it
                if register_number == 0:
                    start_button = register_val
                    if start_button and not start_button_latched:
                        start_button_latched = True
                        reset_button_latched = False
                        Loop1_button_latched = False

                # Stop button
                if register_number == 1:
                    Stop_button = register_val
                    if Stop_button:
                        start_button_latched = False
                        break

                # Assign the value of input register 3 to the variable "PB_reset" and reset start_button_latched
                if register_number == 2:
                    PB_reset = register_val
                    if PB_reset:
                        reset_button_latched = True

                # Bleed button must be pressed and held to function
                if register_number == 3:
                    Bleed_button = register_val
                    while Bleed_button:
                        print("Bleeding system")
                        response = client.read_discrete_inputs(start_register + register_number, 1, unit=MOD_16I)
                        print("Register", start_register + register_number, "bleed value =", response.bits[0])

                        if response.bits[0] == False:
                            Bleed_button = False

                # Stop loop 1 button
                if register_number == 4:
                    Loop1_button = register_val
                    if Loop1_button and not Loop1_button_latched:
                        Loop1_button_latched = True
                        start_button_latched = False

                # Append the register value to the list
                register_values.append(register_val)
                print("Start button latched:", start_button_latched)

                register_number = update_register_number(register_number)

                if start_button_latched:
                    print("System active")
                
                # Add a delay between reads (adjust as needed)
                time.sleep(time_n)

    
    client.close()
    print("Modbus serial connection closed.")
else:
    print("Unable to connect to the Modbus device")
